(function($,window,document,undefined){"use strict";const pluginName="jChart",pluginNameLower=pluginName.toLowerCase(),objPrefix='jchart__',defaults={elements:{container:null,body:null,group:null,figure:null,svg:null,segments:[],markers:null,},data:[],values:{},placeholder:{data:{value:0,color:{normal:'#00a3f2',active:'#00d8f2',},draw:!0,push:!0,order:null,title:'untitled',strokeWidth:3}},appearance:{type:'donut',baseColor:'#ddd',segmentColor:{normal:'#00a3f2',active:'#00d8f2',},baseOffset:0,baseStrokeWidth:1,strokeWidth:3,animated:!0,title:{chartTitle:'',showValue:!0,showPercentage:!0,showSummary:!1,summaryTitle:'',summarySegment:null},radius:100/(2*Math.PI),innerCutout:0.75,centerX:21,centerY:21,subType:'circle',isGauge:!1,gap:1,showMarkers:!0,markerColor:'#f45a42',markerCount:10,markerWidth:0.5,rx:0,ry:0},callbacks:{onInit(){},onRefresh(){},onSegmentMouseover(){},onSegmentMouseout(){}}};function Plugin(element,options){this.element=element;this.$element=$(element);this.settings=$.extend(!0,{},defaults,options);this._defaults=defaults;this._name=pluginName;this._nameLower=pluginNameLower;this._objPrefix=objPrefix;this._methods=methods;this._methods.init(this)}
    const methods={init(instance){instance._methods.initElement(instance);if(instance.settings.callbacks.onInit&&$.isFunction(instance.settings.callbacks.onInit)){instance.settings.callbacks.onInit.call(instance)}},initElement(instance){instance._methods.calculateDataValues(instance);instance._methods.initHtml(instance)},calculateDataValues(instance){const values={maxval:0,};const data=instance.settings.data;for(const segment in data){if(data.hasOwnProperty(segment)){data[segment]=$.extend(!0,{},instance.settings.placeholder.data,data[segment]);values.maxval+=data[segment].value}}
            for(const segment in data){if(data.hasOwnProperty(segment)){if(values.maxval===0){data[segment].percentage_raw=0;data[segment].percentage=0}else{data[segment].percentage_raw=data[segment].value/values.maxval;data[segment].percentage=(data[segment].value/values.maxval)*100}
                if(data[segment].order===null){data[segment].order=data.length}}}
            function compare(a,b){if(a.order===null)return 1;if(b.order===null)return-1;if(a.order<b.order)
                return-1;if(a.order>b.order)
                return 1;return 0}
            data.sort(compare);instance.settings.values=values},initHtml(instance){instance._methods.drawContainer(instance);instance._methods.drawBody(instance)},drawContainer(instance){if(typeof instance.settings.elements.container!=='undefined'&&instance.settings.elements.container!==null){instance.settings.elements.container.remove()}
            if(typeof instance.settings.elements.figure!=='undefined'&&instance.settings.elements.figure!==null){instance.settings.elements.figure.remove()}
            const $container=$('<div>',{'class':pluginNameLower});const $figure=$('<figure>',{'class':instance._objPrefix+'figure'});instance.settings.elements.container=$container;instance.settings.elements.figure=$figure;instance.$element.append($container);$container.append($figure)},drawBody(instance){if(typeof instance.settings.elements.body!=='undefined'&&instance.settings.elements.body!==null){instance.settings.elements.body.remove()}
            if(typeof instance.settings.elements.figureCaption!=='undefined'&&instance.settings.elements.figureCaption!==null){instance.settings.elements.figureCaption.remove()}
            const $chartBody=$('<div>',{'class':instance._objPrefix+'body'});const $figureCaption=$('<figcaption>');instance.settings.elements.body=$chartBody;instance.settings.elements.figureCaption=$figureCaption;instance.settings.elements.figure.append($chartBody);instance.settings.elements.figure.append($figureCaption);instance._methods.drawBodyBase(instance);instance._methods.addEventListeners(instance)},drawBodyBase(instance){if(typeof instance.settings.elements.svg!=='undefined'&&instance.settings.elements.svg!==null){instance.settings.elements.svg.remove()}
            if(typeof instance.settings.elements.group!=='undefined'&&instance.settings.elements.group!==null){instance.settings.elements.group.remove()}
            const data=instance.settings.data;const values=instance.settings.values;let graphData=null;let svg=null;let svgElement=null;let segments=[];let markers=[];switch(instance.settings.appearance.type){case 'donut':graphData=instance._methods.drawBodyBaseDonut(instance,{'type':instance.settings.appearance.subType});svg=graphData.svg;segments=instance._methods.drawBodySegmentDonut(instance,data,values,{'type':instance.settings.appearance.subType});svgElement=instance.settings.elements.body[0].appendChild(svg);svgElement.appendChild(graphData.ring);switch(instance.settings.appearance.type){case 'circle':break;case 'path':svgElement.appendChild(graphData.ring);break}
                if(instance.settings.appearance.animated){instance._methods.animationLoop(instance,function(instance,progress){instance._methods.drawBodySegmentDonut(instance,data,values,{'type':instance.settings.appearance.subType,'updateOnly':!0,'modifier':progress})})}
                if(instance.settings.appearance.title.showSummary){const chartSummary=instance._methods.drawSvgText(instance,{'class':`${instance._objPrefix}summary`,'x':instance.settings.appearance.centerX,'y':instance.settings.appearance.isGauge?instance.settings.appearance.centerY*0.9:instance.settings.appearance.centerY});instance.settings.elements.summary=chartSummary;svgElement.appendChild(chartSummary);if(instance.settings.appearance.title.summaryTitle){instance.settings.elements.summary.innerHTML=instance.settings.appearance.title.summaryTitle}else{if(instance.settings.appearance.title.summarySegment!==null){const segment=instance.settings.data[instance.settings.appearance.title.summarySegment];if(typeof segment!=='undefined'){const percentage=Math.round(segment.percentage*10)/10;instance.settings.elements.summary.innerHTML=`${percentage}%`}}else{const drawableSegments=instance._methods.getDrawableSegments(instance,data,!0);const percentage=Math.round(drawableSegments[0].percentage*10)/10;instance.settings.elements.summary.innerHTML=`${percentage}%`}}}
                break;case 'pie':graphData=instance._methods.drawBodyBasePie(instance);svg=graphData.svg;segments=instance._methods.drawBodySegmentPie(instance,data,values);svgElement=instance.settings.elements.body[0].appendChild(svg);if(instance.settings.appearance.animated){instance._methods.animationLoop(instance,function(instance,progress){instance._methods.drawBodySegmentPie(instance,data,values,{'updateOnly':!0,'modifier':progress})})}
                break;case 'bar':graphData=instance._methods.drawBodyBaseBar(instance);svg=graphData.svg;segments=instance._methods.drawBodySegmentBar(instance,data,values);svgElement=instance.settings.elements.body[0].appendChild(svg);svgElement.appendChild(graphData.background);if(graphData.markers.group!==null){const markersGroup=graphData.markers.group;for(const index in graphData.markers.markers){if(graphData.markers.markers.hasOwnProperty(index)){markersGroup.appendChild(graphData.markers.markers[index])}}
                svgElement.appendChild(markersGroup)}
                if(instance.settings.appearance.animated){instance._methods.animationLoop(instance,function(instance,progress){instance._methods.drawBodySegmentBar(instance,data,values,{'updateOnly':!0,'modifier':progress})})}
                if(instance.settings.appearance.title.showSummary){instance.settings.elements.summary=[];let summaryOffsetX=0;for(const item in data){if(data.hasOwnProperty(item)){const segment=data[item];const chartSummary=instance._methods.drawSvgText(instance,{'class':`${instance._objPrefix}summary`,'x':`${segment['percentage'] / 2 + summaryOffsetX}%`,'y':'50%'});summaryOffsetX+=segment.percentage;instance.settings.elements.summary.push(chartSummary);svgElement.appendChild(chartSummary);if(instance.settings.appearance.title.summarySegment!==null){const segment=instance.settings.data[instance.settings.appearance.title.summarySegment];if(typeof segment!=='undefined'){const percentage=Math.round(segment.percentage*10)/10;chartSummary.innerHTML=`${percentage}%`}}else{const drawableSegments=instance._methods.getDrawableSegments(instance,data,!0);const percentage=Math.round(drawableSegments[0].percentage*10)/10;chartSummary.innerHTML=`${percentage}%`}}}}
                break;default:break}
            const group=svgElement.appendChild(instance._methods.drawGroup(instance));for(const item in data){if(data.hasOwnProperty(item)){const segment=data[item].element;if(typeof segment!=='undefined'&&typeof segment.nodeType!=='undefined'){const segmentElement=group.appendChild(segment);const $segmentElement=$(segmentElement);data[item].element=$segmentElement;instance.settings.elements.segments.push($segmentElement)}}}
            instance.settings.elements.svg=svgElement;instance.settings.elements.group=$(group)},addEventListeners(instance){const items=instance.settings.data;for(const item in items){if(items.hasOwnProperty(item)){const segment=items[item].element;if(typeof segment!=='undefined'){segment.on('mouseover',function(){const $this=$(this);const dId=$this.attr('d-id');$this.removeClass('active');$this.addClass('active');switch(instance.settings.appearance.type){case 'donut':switch(instance.settings.appearance.subType){case 'circle':$this.css('stroke',instance.settings.data[dId].color.active);break;case 'path':$this.css('fill',instance.settings.data[dId].color.active);break}
            break;case 'pie':$this.css('fill',instance.settings.data[dId].color.active);break;case 'bar':$this.css('fill',instance.settings.data[dId].color.active);break}
            if(instance.settings.callbacks.onSegmentMouseover&&$.isFunction(instance.settings.callbacks.onSegmentMouseover)){instance.settings.callbacks.onSegmentMouseover.call(instance,dId,instance.settings.data[dId])}});segment.on('mouseout',function(){const $this=$(this);const dId=$this.attr('d-id');$this.removeClass('active');switch(instance.settings.appearance.type){case 'donut':switch(instance.settings.appearance.subType){case 'circle':$this.css('stroke','');break;case 'path':$this.css('fill','');break}
            break;case 'pie':$this.css('fill','');break;case 'bar':$this.css('fill','');break}
            if(instance.settings.callbacks.onSegmentMouseout&&$.isFunction(instance.settings.callbacks.onSegmentMouseout)){instance.settings.callbacks.onSegmentMouseout.call(instance,instance.settings.data[dId],instance.settings.data[dId])}})}}}},drawBodyBaseDonut(instance,options){const defaults={type:'circle',isGauge:instance.settings.appearance.isGauge,centerX:instance.settings.appearance.centerX,centerY:instance.settings.appearance.isGauge?instance.settings.appearance.centerY/2:instance.settings.appearance.centerY};const settings=$.extend(!0,{},defaults,options);let response={};const svg=document.createElementNS("http://www.w3.org/2000/svg","svg");svg.setAttribute('class',instance._objPrefix+'donut');svg.setAttribute('width','100%');svg.setAttribute('height','100%');svg.setAttribute('viewBox',`0 0 ${settings.centerX * 2} ${settings.centerY * 2}`);svg.setAttributeNS("http://www.w3.org/2000/xmlns/","xmlns:xlink","http://www.w3.org/1999/xlink");let donutRing;switch(settings.type){case 'circle':donutRing=instance._methods.drawSvgCircle(instance,{class:instance._objPrefix+'donut__ring'+instance._objPrefix+'donut__ring-circle',fill:instance.settings.appearance.baseColor,stroke:instance.settings.appearance.baseColor,'stroke-width':instance.settings.appearance.baseStrokeWidth});const donutHole=null;response={'svg':svg,'ring':donutRing,'hole':donutHole};break;case 'path':const baseDoughnutRadius=instance.settings.appearance.radius+instance.settings.appearance.baseStrokeWidth;const cutoutRadius=instance.settings.appearance.radius*(instance.settings.appearance.innerCutout);const baseCutoutRadius=cutoutRadius-instance.settings.appearance.baseStrokeWidth;const rad=(settings.isGauge?Math.PI:Math.PI*2);const startRadius=-rad,segmentAngle=(99.9999/100)*rad,endRadius=startRadius+segmentAngle,startX=instance.settings.appearance.centerX+Math.cos(startRadius)*baseDoughnutRadius,startY=instance.settings.appearance.centerY+Math.sin(startRadius)*baseDoughnutRadius,endX=instance.settings.appearance.centerX+Math.cos(endRadius)*baseDoughnutRadius,endY=instance.settings.appearance.centerY+Math.sin(endRadius)*baseDoughnutRadius,startX2=instance.settings.appearance.centerX+Math.cos(endRadius)*baseCutoutRadius,startY2=instance.settings.appearance.centerY+Math.sin(endRadius)*baseCutoutRadius,endX2=instance.settings.appearance.centerX+Math.cos(startRadius)*baseCutoutRadius,endY2=instance.settings.appearance.centerY+Math.sin(startRadius)*baseCutoutRadius;const cmd=['M',startX,startY,'A',baseDoughnutRadius,baseDoughnutRadius,0,1,1,endX,endY,'L',startX2,startY2,'A',baseCutoutRadius,baseCutoutRadius,0,1,0,endX2,endY2,'Z'];donutRing=instance._methods.drawSvgPath(instance,{class:`${instance._objPrefix}donut__ring ${instance._objPrefix}donut__ring-path`,fill:instance.settings.appearance.baseColor,d:cmd.join(' '),});response={'svg':svg,'ring':donutRing};break}
            return response},drawBodySegmentDonut(instance,data,values,options){const defaults={type:'circle',isGauge:instance.settings.appearance.isGauge,updateOnly:!1,modifier:1,drawableSegments:instance._methods.getDrawableSegments(instance,data).length};const settings=$.extend(!0,{},defaults,options);let segments=[];data=instance.settings.data;const gap=(settings.drawableSegments>1||settings.isGauge)?instance.settings.appearance.gap:0.00001;switch(settings.type){case 'circle':const base_offset=25;let offset=0;for(const segment in data){if(data.hasOwnProperty(segment)){const local_offset=(100-data[segment].percentage*settings.modifier);if(data[segment].draw===!0){let svgCircleOptions={};let drawOnly=!1;let element=null;const titlePartials={'segmentTitle':data[segment].title,'segmentValue':instance._methods.numberFormat(data[segment].value,0,',','\xa0'),'segmentPercentage':Math.round(data[segment].percentage*10)/10};let title=titlePartials.segmentTitle;if(instance.settings.appearance.title.showValue&&instance.settings.appearance.title.showPercentage){title+=`: ${titlePartials.segmentValue} (${titlePartials.segmentPercentage}%)`}else if(instance.settings.appearance.title.showValue){title+=`: ${titlePartials.segmentValue}`}else if(instance.settings.appearance.title.showPercentage){title+=`: ${titlePartials.segmentPercentage}%`}
            if(settings.updateOnly){drawOnly=!0;element=data[segment].element[0];svgCircleOptions={fill:'transparent',stroke:data[segment].color.normal,'stroke-width':data[segment].strokeWidth,'stroke-dasharray':(data[segment].percentage*settings.modifier-gap)+' '+(local_offset+gap),'stroke-dashoffset':base_offset+offset}}else{svgCircleOptions={'d-id':segment,class:`${instance._objPrefix}donut__segment ${instance._objPrefix}donut__segment-circle`,title:title,fill:'transparent',stroke:data[segment].color.normal,'stroke-width':data[segment].strokeWidth,'stroke-dasharray':(data[segment].percentage*settings.modifier-gap)+' '+(local_offset+gap),'stroke-dashoffset':base_offset+offset}}
            const donutSegment=instance._methods.drawSvgCircle(instance,svgCircleOptions,drawOnly,element);if(!settings.updateOnly){data[segment].element=donutSegment;segments.push(donutSegment)}}
            if(data[segment].push===!0){offset+=local_offset}}}
            break;case 'path':const doughnutRadius=instance.settings.appearance.radius;const cutoutRadius=doughnutRadius*(instance.settings.appearance.innerCutout);const centerX=instance.settings.appearance.centerX;const centerY=instance.settings.appearance.centerY;const startAngle=settings.isGauge?Math.PI:Math.PI/2;const rad=settings.isGauge?Math.PI:Math.PI*2;const gapPercent=(gap/100);let gapForSegment=gapPercent;let startRadius=-startAngle;if(settings.isGauge){startRadius+=gapPercent*startAngle;gapForSegment+=(gapPercent/settings.drawableSegments)}
            for(const segment in data){if(data.hasOwnProperty(segment)){const gapAngle=gapPercent*rad,segmentAngle=settings.modifier*((data[segment].percentage_raw-gapForSegment)*rad),endRadius=startRadius+segmentAngle,largeArc=((endRadius-startRadius)%rad)>Math.PI?1:0,startX=centerX+Math.cos(startRadius)*doughnutRadius,startY=centerY+Math.sin(startRadius)*doughnutRadius,endX=centerX+Math.cos(endRadius)*doughnutRadius,endY=centerY+Math.sin(endRadius)*doughnutRadius,startX2=centerX+Math.cos(endRadius)*cutoutRadius,startY2=centerY+Math.sin(endRadius)*cutoutRadius,endX2=centerX+Math.cos(startRadius)*cutoutRadius,endY2=centerY+Math.sin(startRadius)*cutoutRadius;if(data[segment].draw===!0){const cmd=['M',startX,startY,'A',doughnutRadius,doughnutRadius,0,largeArc,1,endX,endY,'L',startX2,startY2,'A',cutoutRadius,cutoutRadius,0,largeArc,0,endX2,endY2,'Z'];let svgPathOptions={};let drawOnly=!1;let element=null;const titlePartials={'segmentTitle':data[segment].title,'segmentValue':instance._methods.numberFormat(data[segment].value,0,',','\xa0'),'segmentPercentage':Math.round(data[segment].percentage*10)/10};let title=titlePartials.segmentTitle;if(instance.settings.appearance.title.showValue&&instance.settings.appearance.title.showPercentage){title+=`: ${titlePartials.segmentValue} (${titlePartials.segmentPercentage}%)`}else if(instance.settings.appearance.title.showValue){title+=`: ${titlePartials.segmentValue}`}else if(instance.settings.appearance.title.showPercentage){title+=`: ${titlePartials.segmentPercentage}%`}
                if(settings.updateOnly){drawOnly=!0;element=data[segment].element[0];svgPathOptions={fill:data[segment].color.normal,stroke:'transparent','stroke-width':data[segment].strokeWidth,d:cmd.join(' ')}}else{svgPathOptions={'d-id':segment,class:`${instance._objPrefix}donut__segment ${instance._objPrefix}donut__segment-path`,title:title,fill:data[segment].color.normal,stroke:'transparent','stroke-width':data[segment].strokeWidth,d:cmd.join(' ')}}
                const donutSegment=instance._methods.drawSvgPath(instance,svgPathOptions,drawOnly,element);if(!settings.updateOnly){data[segment].element=donutSegment;segments.push(donutSegment)}}
                if(data[segment].push===!0){startRadius+=segmentAngle+gapAngle}}}
            break}
            return segments},drawBodyBasePie(instance){const svg=document.createElementNS("http://www.w3.org/2000/svg","svg");svg.setAttribute('class',`${instance._objPrefix}pie`);svg.setAttribute('width','100%');svg.setAttribute('height','100%');svg.setAttribute('viewBox','-1 -1 2 2');svg.setAttribute('style','transform: rotate(-0.25turn)');svg.setAttributeNS("http://www.w3.org/2000/xmlns/","xmlns:xlink","http://www.w3.org/1999/xlink");return{'svg':svg}},drawBodySegmentPie(instance,data,values,options){const defaults={updateOnly:!1,modifier:1,drawableSegments:instance._methods.getDrawableSegments(instance,data).length};const settings=$.extend(!0,{},defaults,options);let segments=[];let gap=0.00001;let baseGap=0;if(instance.settings.appearance.gap&&settings.drawableSegments>1){gap=instance.settings.appearance.gap;baseGap=gap*0.1}
            const base_offset=0;let offset=0;const gapPercent=(gap/100);for(const segment in data){if(data.hasOwnProperty(segment)){const percentage=settings.modifier*data[segment].percentage_raw;if(data[segment].draw===!0){const startCoordinates=instance._methods.getCoordinatesForPercent(1,base_offset+offset+gapPercent);const endCoordinates=instance._methods.getCoordinatesForPercent(1,base_offset+offset+percentage-gapPercent);const largeArcFlag=settings.modifier*(data[segment].percentage_raw)>.5?1:0;let gapCoordinatesStart=instance._methods.getCoordinatesForPercent(baseGap+gapPercent,base_offset+offset+gapPercent);let gapCoordinatesEnd=instance._methods.getCoordinatesForPercent(baseGap+gapPercent,base_offset+offset+percentage-gapPercent);let gapCoordinatesCenter={x:(gapCoordinatesStart.x+gapCoordinatesEnd.x)/2,y:(gapCoordinatesStart.y+gapCoordinatesEnd.y)/2};const pathData=[`M ${startCoordinates['x']} ${startCoordinates['y']}`,`A 1 1 0 ${largeArcFlag} 1 ${endCoordinates['x']} ${endCoordinates['y']}`,`L ${gapCoordinatesCenter['x']} ${gapCoordinatesCenter['y']}`,].join(' ');let svgPathOptions={};let drawOnly=!1;let element=null;if(settings.updateOnly){drawOnly=!0;element=data[segment].element[0];svgPathOptions={fill:data[segment].color.normal,d:pathData}}else{svgPathOptions={'d-id':segment,class:`${instance._objPrefix}pie__segment`,fill:data[segment].color.normal,d:pathData}}
                const pieSegment=instance._methods.drawSvgPath(instance,svgPathOptions,drawOnly,element);if(!settings.updateOnly){data[segment].element=pieSegment;segments.push(pieSegment)}
                offset+=percentage}else{if(data[segment].push===!0){offset+=percentage+gapPercent}}}}
            return segments},drawBodyBaseBar(instance){const svg=document.createElementNS("http://www.w3.org/2000/svg","svg");svg.setAttribute('class',`${instance._objPrefix}bar`);svg.setAttribute('width','100%');svg.setAttribute('height','100%');svg.setAttribute('viewBox','0 0 100 10');svg.setAttributeNS("http://www.w3.org/2000/xmlns/","xmlns:xlink","http://www.w3.org/1999/xlink");const background=instance._methods.drawSvgRect(instance,{fill:instance.settings.appearance.baseColor,},!1,null);let markers={group:null,markers:null};if(instance.settings.appearance.showMarkers){markers.markers=[];markers.group=instance._methods.drawGroup(instance,{class:`${instance._objPrefix}markers`});const markerCount=instance.settings.appearance.markerCount;for(let i=0;i<=markerCount;i++){let markerWidth=instance.settings.appearance.markerWidth,markerOffsetX=i*(100/markerCount);markerOffsetX-=(i===markerCount)?markerWidth:0;markerOffsetX-=(i===0||i===markerCount)?0:(markerWidth/2);const marker=instance._methods.drawSvgRect(instance,{width:markerWidth,height:'125%',x:markerOffsetX,fill:instance.settings.appearance.markerColor});markers.markers.push(marker)}}
            instance.settings.elements.markers=markers;return{'svg':svg,'background':background,'markers':markers}},drawBodySegmentBar(instance,data,values,options){const defaults={updateOnly:!1,modifier:1,};const settings=$.extend(!0,{},defaults,options);let segments=[];const base_offset=0;let offset=0;for(const segment in data){if(data.hasOwnProperty(segment)){if(data[segment].draw===!0){const startCoordinates=base_offset+offset;const width=data[segment].percentage*settings.modifier;offset+=data[segment].percentage*settings.modifier;let svgRectOptions={};let drawOnly=!1;let element=null;if(settings.updateOnly){drawOnly=!0;element=data[segment].element[0];svgRectOptions={width:width,x:`${startCoordinates}%`,fill:data[segment].color.normal,}}else{svgRectOptions={'d-id':segment,class:`${instance._objPrefix}bar__segment`,width:width,x:`${startCoordinates}%`,fill:data[segment].color.normal,}}
            const barSegment=instance._methods.drawSvgRect(instance,svgRectOptions,drawOnly,element);if(!settings.updateOnly){data[segment].element=barSegment;segments.push(barSegment)}}else{if(data[segment].push===!0){offset+=data[segment].percentage_raw}}}}
            return segments},drawGroup(instance,options){const defaults={'class':'',};const settings=$.extend(!0,{},defaults,options);const group=document.createElementNS('http://www.w3.org/2000/svg','g');for(const attribute in settings){if(settings.hasOwnProperty(attribute)&&settings[attribute]!==''&&settings[attribute]!==0){group.setAttributeNS(null,attribute,settings[attribute])}}
            return group},drawSvgCircle(instance,options,updateOnly=!1,element=null){const defaults={'class':'','cx':instance.settings.appearance.centerX,'cy':instance.settings.appearance.centerY,'r':instance.settings.appearance.radius,'fill':'#fff','stroke':'','stroke-width':instance.settings.appearance.strokeWidth,'stroke-dasharray':'','stroke-dashoffset':'25',};const settings=$.extend(!0,{},defaults,options);let nCircle=element;if(!updateOnly){nCircle=document.createElementNS('http://www.w3.org/2000/svg','circle')}
            for(const attribute in settings){if(settings.hasOwnProperty(attribute)&&settings[attribute]!==''&&settings[attribute]!==0){nCircle.setAttributeNS(null,attribute,settings[attribute])}}
            return nCircle},drawSvgRect(instance,options,updateOnly=!1,element=null){const defaults={'width':'100%','height':'100%','x':0,'y':0,'rx':instance.settings.appearance.rx,'ry':instance.settings.appearance.ry,'class':'','fill':'#fff','stroke':'','stroke-width':0,};const settings=$.extend(!0,{},defaults,options);let nRect=element;if(!updateOnly){nRect=document.createElementNS('http://www.w3.org/2000/svg','rect')}
            for(const attribute in settings){if(settings.hasOwnProperty(attribute)&&settings[attribute]!==''&&settings[attribute]!==0){nRect.setAttributeNS(null,attribute,settings[attribute])}}
            return nRect},drawSvgPath(instance,options,updateOnly=!1,element=null){const defaults={'class':'','fill':'#fff','d':'','stroke':'','stroke-width':0,'stroke-dasharray':'','stroke-dashoffset':0,};const settings=$.extend(!0,{},defaults,options);let nPath=element;if(!updateOnly){nPath=document.createElementNS('http://www.w3.org/2000/svg','path')}
            for(const attribute in settings){if(settings.hasOwnProperty(attribute)&&settings[attribute]!==''&&settings[attribute]!==0){nPath.setAttributeNS(null,attribute,settings[attribute])}}
            return nPath},drawSvgText(instance,options,updateOnly=!1,element=null){const defaults={'class':'','x':0,'y':0,'alignment-baseline':'middle','text-anchor':'middle'};const settings=$.extend(!0,{},defaults,options);let nElement=element;if(!updateOnly){nElement=document.createElementNS('http://www.w3.org/2000/svg','text')}
            for(const attribute in settings){if(settings.hasOwnProperty(attribute)&&settings[attribute]!==''&&settings[attribute]!==0){nElement.setAttributeNS(null,attribute,settings[attribute])}}
            return nElement},getCoordinatesForPercent(radius,percent){const x=radius*Math.cos(2*Math.PI*percent);const y=radius*Math.sin(2*Math.PI*percent);return{x:x,y:y}},getDrawableSegments(instance,data,sortByValue=!1){const drawableSegments=data.filter(function(segment){return segment.draw===!0&&segment.percentage_raw>0});if(sortByValue){drawableSegments.sort(function(a,b){return a.value<b.value});drawableSegments.sort()}
            return drawableSegments},lightenRgbColors(c,n){let d;for(let i=3;i--;c[i]=d<0?0:d>255?255:d|0){d=c[i]+n}
            return c},animationLoop(instance,callback,duration=1000,easing=!0){const time={start:performance.now(),total:duration};const easeOut=progress=>Math.pow(--progress,3)+1;const tick=now=>{time.elapsed=now-time.start;const progress_raw=time.elapsed/time.total;let eased=1;let progress=progress_raw;if(easing)
            progress=easeOut(progress);if(progress<0)
            progress=0;if(progress>1)
            progress=1;callback.apply(instance,[instance,progress]);if(progress<1)
            requestAnimationFrame(tick)};requestAnimationFrame(tick)},GetInstance(instance){instance._methods.Log(instance,instance)},Destroy(instance){instance.settings.elements.container.remove();$.removeData(instance.$element,"plugin_"+instance._name)},Update(instance){instance._methods.calculateDataValues(instance);const data=instance.settings.data;const values=instance.settings.values;switch(instance.settings.appearance.type){case 'donut':if(instance.settings.appearance.animated){instance._methods.animationLoop(instance,function(instance,progress){instance._methods.drawBodySegmentDonut(instance,data,values,{'type':instance.settings.appearance.subType,'updateOnly':!0,'modifier':progress})})}
            break;case 'pie':if(instance.settings.appearance.animated){instance._methods.animationLoop(instance,function(instance,progress){instance._methods.drawBodySegmentPie(instance,data,values,{'updateOnly':!0,'modifier':progress})})}
            break;default:break}},Refresh(instance){instance._methods.initElement(instance);if(instance.settings.callbacks.onRefresh&&$.isFunction(instance.settings.callbacks.onRefresh)){instance.settings.callbacks.onRefresh.call(instance)}},Log(instance,message){console.log('*** '+instance._name+' ***');if(message instanceof Array){for(let value of message){console.log(value)}}else{console.log(message)}},objSortByPositionInDOM(input,attr,attr2){let _input=input;let output;if(attr&&attr2){output=_input.sort(function(a,b){if(a[attr][attr2][0]===b[attr][attr2][0])return 0;if(!a[attr][attr2][0].compareDocumentPosition){return a[attr][attr2][0].sourceIndex-b[attr][attr2][0].sourceIndex}
            if(a[attr][attr2][0].compareDocumentPosition(b[attr][attr2][0])&2){return 1}
            return-1})}
        else if(attr){output=_input.sort(function(a,b){if(a[attr][0]===b[attr][0])return 0;if(!a[attr][0].compareDocumentPosition){return a[attr][0].sourceIndex-b[attr][0].sourceIndex}
            if(a[attr][0].compareDocumentPosition(b[attr][0])&2){return 1}
            return-1})}else{output=_input.sort(function(a,b){if(a[0]===b[0])return 0;if(!a[0].compareDocumentPosition){return a[0].sourceIndex-b[0].sourceIndex}
            if(a[0].compareDocumentPosition(b[0])&2){return 1}
            return-1})}
            return output},numberFormat(number,decimals,dec_point,thousands_sep){number=(number+'').replace(/[^0-9+\-Ee.]/g,'');var n=!isFinite(+number)?0:+number,prec=!isFinite(+decimals)?0:Math.abs(decimals),sep=(typeof thousands_sep==='undefined')?',':thousands_sep,dec=(typeof dec_point==='undefined')?'.':dec_point,s='',toFixedFix=function(n,prec){var k=Math.pow(10,prec);return''+Math.round(n*k)/k};s=(prec?toFixedFix(n,prec):''+Math.round(n)).split('.');if(s[0].length>3){s[0]=s[0].replace(/\B(?=(?:\d{3})+(?!\d))/g,sep)}
            if((s[1]||'').length<prec){s[1]=s[1]||'';s[1]+=new Array(prec-s[1].length+1).join('0')}
            return s.join(dec)}};$.fn[pluginName]=function(options){let instances=[];this.each(function(){if(!$.data(this,"plugin_"+pluginName)){const instance=new Plugin(this,options);$.data(this,"plugin_"+pluginName,instance);instances.push(instance)}});if(instances.length===1){return instances[0]}
        return null}})(jQuery,window,document)